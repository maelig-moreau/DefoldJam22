--Main tasks : collisions diagonales et attraper les bords
--Main tasks : Attraper les bords
--Obliger l'élan avant un saut ?
--Permettre de courir sur une seule case après l'élan de base ?
local function grid_to_real(vector3)
	local newvect = vmath.vector3(0,0,0)
	newvect.x = vector3.x * CELL_SIDE
	newvect.y = vector3.y * CELL_SIDE
	return newvect
end

local function real_to_grid(vector3)
	local newvect = vmath.vector3(0,0,0)
	newvect.x = math.floor(vector3.x / CELL_SIDE + 0.5)
	newvect.y = math.floor(vector3.y / CELL_SIDE + 0.5)
	return newvect
end

function init(self)
	math.randomseed(os.time())
	--msg.post("@render:", "clear_color", { color = vmath.vector4(1, 0, 0, 0) } ) J'ai mal
	if muted then sound.set_group_gain("SFX",0) end
	sound.set_group_gain("SFX",0.5)
	playerPosition = go.get_position()
	curentLevel = "/terrain#terrain"
	CELL_SIDE = 50
	DEADZONE_SIZE = 0.6 --ranging from 0 to 1
	msg.post(".","acquire_input_focus")
	self.fairy = nil
	self.currentMovement = vmath.vector3(0,0,0)
	self.moving = false
	self.shooting = false
	self.facingRight = true
	self.momentum = vmath.vector3() -- momentum represents forces, NOT the fairy
	self.controlMomentum = vmath.vector3() --Cette valeure est a NIL de manière purement et simplement permanente
	self.sprinting = false --a state to check for deciding momentum
	self.lilHoping = 0
	self.runHoping = 0
	self.neutralHoping = false
	self.hanging = false
	self.lilFailsafe = false
	self.runHFailsafe = false
	self.stopHanging = false
	rive.play_anim("#rivemodel", "idle", go.PLAYBACK_ONCE_BACKWARD)
	self.currentAnim = "idle"
end

function on_message(self, message_id, message, sender)
	
end

local function is_grounded(vector3) -- checks if position has tile under
	local bool = true
	local tile = tilemap.get_tile(curentLevel, "collision", vector3.x, vector3.y)
	if tile == 0 then
		bool = false
	elseif tile == nil then
		bool = nil
	end
	return bool
end

local function is_walled(position, height) -- defaults on player
	if height == nil then height = 2 end
	if position == nil then position = real_to_grid(go.get_position()) end
	local blocked = {top=false,right=false,left=false}
	local tile = nil
	for i=1,height,1 do
		if tilemap.get_tile(curentLevel, "collision", position.x+1, position.y+i) ~= 0 then
			blocked.right = true
		end
		if tilemap.get_tile(curentLevel, "collision", position.x-1, position.y+i) ~= 0 then
			blocked.left = true
		end
	end
	if tilemap.get_tile(curentLevel, "collision", position.x, position.y+height) ~= 0 then
		blocked.top = true
	end
	return blocked
end

local function move_finished(self)
	self.overrideProtection = false
	self.moving = false
	self.fairy = nil
	self.controlMomentum = vmath.vector3()
end

local function move_fairy(self,target)
	-- the "fairy" represents the action that the player is aiming to do
	-- it is visually represented in the game space and is used to
	-- connect movements to each other
	self.fairy = target
	local pos = real_to_grid(go.get_position())
	local displace = vmath.vector3(0,0,0)
	local antidelta = vmath.vector3(1,0,0)
	displace.x = math.abs(self.fairy.x-pos.x)
	displace.y = math.abs(self.fairy.y-pos.y)
	displace = displace - antidelta
	--print(displace)
	for j = displace.x, 0, -1 do
		local vectorJ = vmath.vector3(j, 0, 0)
		if is_walled(pos-vectorJ, nil).left and self.fairy.x < pos.x then self.fairy.x = pos.x-vectorJ.x end
		if is_walled(pos+vectorJ, nil).right and self.fairy.x > pos.x then self.fairy.x = pos.x+vectorJ.x end
	end
	local vectorK = vmath.vector3(0, 1, 0)
	local verticalBlocked = false
	if is_walled(pos+vectorK, height).top == true and (self.lilHoping == 2 or self.runHoping == 2 or self.neutralHoping == true) then 
		self.fairy.y = pos.y 
		self.lilHoping = 0
		self.runHoping = 0
		self.neutralHoping = false
		verticalBlocked = true
	end
	if self.lilHoping == 2 or self.runHoping == 2 then
		if self.facingRight == true then
			vectorK.x = 1
		else
			vectorK.x = -1
		end
		if is_walled(pos+vectorK, height).top == true and verticalBlocked == false then
			self.fairy.y = pos.y 
			self.lilHoping = 0
			self.runHoping = 0
			self.neutralHoping = false
		end
	end
	local i = 1
	local foundGround = false
	local pos = self.fairy + self.momentum + self.controlMomentum
	while foundGround == false do
		i = i - 1
		local newpos = vmath.vector3(pos.x,pos.y+i,0)
		local grounded = is_grounded(newpos)
		if grounded == nil then
			break
		elseif grounded then
			go.set_position(grid_to_real(newpos),go.get_id("/anticipator"))
			break
		end
		if i < -100 then break end
	end
end

function check_hands(self, special)
	if special == nil then
		if self.stopHanging == false then
			local pPos = vmath.vector3()
			pPos = real_to_grid(go.get_position())
			local vectorI = vmath.vector3(0,1,0)
			if self.facingRight == true then
				if is_walled(pPos+vectorI, 1).right == true and is_walled(pPos+vectorI, 1).top == false then
					vectorI.y = vectorI.y +1
					if is_walled(pPos+vectorI, 2).right == false and is_walled(pPos+vectorI, 1).top == false then
						self.hanging = true
						move_fairy(self, pPos)
					end
				elseif self.lilHoping == 0 and self.lilFailsafe == false then
					vectorI.y = vectorI.y +1
					if is_walled(pPos+vectorI, 1).right == true and is_walled(pPos+vectorI, 1).top == false then
						vectorI.y = vectorI.y +1
						if is_walled(pPos+vectorI, 2).right == false and is_walled(pPos+vectorI, 1).top == false then
							self.hanging = true
							vectorI.y = vectorI.y -2
							local target = pPos + vectorI
							move_fairy(self, target)
						end
					end
				end
			else
				if is_walled(pPos+vectorI, 1).left == true and is_walled(pPos+vectorI, 1).top == false then
					vectorI.y = vectorI.y +1
					if is_walled(pPos+vectorI, 2).left == false and is_walled(pPos+vectorI, 1).top == false then
						self.hanging = true
						move_fairy(self, pPos)
					end
				elseif self.lilHoping == 0 then
					vectorI.y = vectorI.y +1
					if is_walled(pPos+vectorI, 1).left == true and is_walled(pPos+vectorI, 1).top == false then
						vectorI.y = vectorI.y +1
						if is_walled(pPos+vectorI, 2).left == false and is_walled(pPos+vectorI, 1).top == false then
							self.hanging = true
							vectorI.y = vectorI.y -2
							local target = pPos + vectorI
							move_fairy(self, target)
						end
					end
				end
			end
		end
	elseif special == 1 then
		local pPos = vmath.vector3()
		pPos = real_to_grid(go.get_position())
		local vectorI = vmath.vector3(0,2,0)
		if self.facingRight == true then
			vectorI.x = vectorI.x + special
			if is_walled(pPos+vectorI, 1).right == true and is_walled(pPos+vectorI, 1).top == false then
				vectorI.y = vectorI.y +1
				if is_walled(pPos+vectorI, 2).right == false and is_walled(pPos+vectorI, 1).top == false then
					self.runHFailsafe = true
				end
			end
		else
			vectorI.x = vectorI.x - special
			if is_walled(pPos+vectorI, 1).left == true and is_walled(pPos+vectorI, 1).top == false then
				vectorI.y = vectorI.y +1
				if is_walled(pPos+vectorI, 2).left == false and is_walled(pPos+vectorI, 1).top == false then
					self.runHFailsafe = true
				end
			end
		end
	end
end

function update(self, dt)
	playerPosition = go.get_position()
	--print(self.momentum)
	--print(self.momentum.y)
	--print(controlMomentum)
	--print(self.facingRight)
	--print(self.moving)
	--print(self.fairy)
	--print(self.overrideProtection)
	--print(self.facingRight)
	--print("pong")
	--print(self.hanging)
	local pPos = real_to_grid(go.get_position())
	local grounded = is_grounded(pPos)
	--print(grounded)
	--print("LH =",self.lilHoping,"RH=",self.runHoping, "SM", self.moving, "SH", self.hanging)--, "LFS", self.lilFailsafe)
	--print("NH =", self.neutralHoping)
	--print(pPos)
	--print("playerpos =", pPos, "fairypos=", self.fairy)
	local anticipatedFall = vmath.vector3(pPos.x, pPos.y+self.momentum.y-1, 0) 
	if is_grounded(anticipatedFall) and grounded == false and self.momentum.y < -1 then --empèche le personnage de s'écraser après unr grosse chute
	self.momentum.y = 0
	self.runHoping = 0
	self.lilhoping = 0
	self.neutralHoping = false
		--jouer une animation ?
	end
	if self.moving == false and self.lilFailsafe == true then self.lilFailsafe = false end
	if grounded then self.momentum.y = 0 end
	if self.fairy == nil then
		if self.runHoping == 1 then
			if self.facingRight == true then 
			local target = vmath.vector3(1,-1,0)
			target = pPos + target
				move_fairy(self, target)
			else
				local target = vmath.vector3(-1,-1,0)
				target = pPos + target
				move_fairy(self, target)
			end
			self.runHoping = 0 
		end
		if self.lilHoping == 1 then 
			if self.facingRight == true then
				local target = vmath.vector3(1,-1,0)
				target = pPos + target
				move_fairy(self, target)
			else
				local target = vmath.vector3(-1,-1,0)
				target = pPos + target
				move_fairy(self, target)
			end
			self.lilFailsafe = true
			self.lilHoping = 0 
		end
	end
	if grounded == false then
		check_hands(self, nil)
	end
	if self.moving == false then
		if grounded == false then
			if self.lilHoping == 0 and self.runHoping == 0 and self.fairy == nil and self.hanging == false then
				self.momentum.y = self.momentum.y - 1
				self.neutralHoping = false
				self.momentum.x = 0
			end
			if self.facingRight == true then
				if self.lilHoping == 2 then
					local target = vmath.vector3(1,0,0)
					target = pPos + target
					move_fairy(self, target)
					self.lilHoping = 1
				elseif self.runHoping == 2 then
					local target = vmath.vector3(0,0,0)
					check_hands(self, 1)
					if self.runHFailsafe == true then
						target.x = target.x +1 
					else
						target.x = target.x +2
					end
					target = pPos + target
					move_fairy(self, target)
					self.runHoping = 1
				end
			elseif self.facingRight == false then
				if self.lilHoping == 2 then
					local target = vmath.vector3(-1,0,0)
					target = pPos + target
					move_fairy(self, target)
					self.lilHoping = 1
				elseif self.runHoping == 2 then
					local target = vmath.vector3(0,0,0)
					check_hands(self, 1)
					if self.runHFailsafe == true then
						target.x = target.x -1 
					else
						target.x = target.x -2
					end
					target = pPos + target
					move_fairy(self, target)
					self.runHoping = 1
				end
			end
		else
			self.hanging = false
			self.stopHanging = false
			self.momentum.y = 0
			self.momentum.x = 0
			self.runHFailsafe = false
			if self.currentAnim ~= "run" and self.shooting == false then
				rive.play_anim("#rivemodel", "run", go.PLAYBACK_LOOP_FORWARD)
				self.currentAnim = "run"
			end
			if self.facingRight == true then 
				go.set(".","euler.y",180) 
			else
				go.set(".","euler.y",0) 
			end
		end
		local move = vmath.vector3()

		if self.fairy == nil and (self.shooting == false or grounded == false) then
			move = pPos + self.momentum
			rive.play_anim("#rivemodel", "idle", go.PLAYBACK_ONCE_FORWARD)
			self.currentAnim = "idle"
		elseif self.fairy ~= nil then
			move = self.fairy + self.momentum
		end
		if move.y > real_to_grid(go.get_position()).y then
			rive.play_anim("#rivemodel", "jump", go.PLAYBACK_ONCE_BACKWARD)
			self.currentAnim = "jump"
		end
		if grounded == false or self.fairy ~= nil then
			if tilemap.get_tile(curentLevel, "collision", move.x, move.y+1) ~= 0 then 
				move.y = move.y + 1
			end
			sound.play("#steps")
			go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, grid_to_real(move), go.EASING_LINEAR, 1/4,0,move_finished)
			self.moving = true
		end
	end
end

function on_input(self, action_id, action)
	if (action.pressed or self.overrideProtection == false) and is_grounded(real_to_grid(go.get_position())) then
		if action_id == hash("left") and action.value > DEADZONE_SIZE then
			if self.lilHoping == 0 and self.runHoping == 0 then
				self.overrideProtection = false
				local gridPos = real_to_grid(go.get_position())
				local target = vmath.vector3()
				target = gridPos
				if self.facingRight == false then
					if self.sprinting == true then
						target.x = target.x-2
					else
						target.x = target.x-1
					end
				end
				self.controlMomentum.y = - 1
				move_fairy(self, target)
				--if self.gridSpeed == 2 then --tentative d'imposer un élan avant le grand saut
				--	self.sprinting = true
				--end
				self.facingRight = false
			end
		elseif action_id == hash("right") and action.value > DEADZONE_SIZE then
			if self.lilHoping == 0 and self.runHoping == 0 then
				self.overrideProtection = false
				local gridPos = real_to_grid(go.get_position())
				local target = vmath.vector3()
				target = gridPos
				if self.facingRight == true then
					if self.sprinting == true then
						target.x = target.x+2
					else
						target.x = target.x+1
					end
				end
				self.controlMomentum.x = 1
				move_fairy(self, target)
				--if self.gridSpeed == 2 then --tentative d'imposer un élan avant le grand saut
				--	self.sprinting = true --probleme : on peut sauter sans élan en bougeant seulement la fairy
				--end
				self.facingRight = true
			end
		end
	end
	if action_id == hash("up") and action.value > DEADZONE_SIZE then
		self.overrideProtection = true
		local pPos = real_to_grid(go.get_position())
		local target = vmath.vector3()
		if self.lilHoping == 0 and self.runHoping == 0 and self.fairy == nil and self.moving == false and is_grounded(real_to_grid(go.get_position())) == true then
			target.y = pPos.y+1
			target.x = pPos.x
			self.neutralHoping = true
			move_fairy(self, target)
		elseif self.hanging == true then
			
		end
	end
	if action_id == hash("down") and action.value > DEADZONE_SIZE then
		if self.hanging == true then
			self.hanging = false
			self.stopHanging = true
		end
	end
	if action_id == hash("jump") and is_grounded(real_to_grid(go.get_position())) then
		self.overrideProtection = true
		local gridPos = real_to_grid(go.get_position())
		local target = vmath.vector3()
		if self.lilHoping == 0 and self.runHoping == 0 and self.fairy == nil and self.moving == false then
			if self.sprinting == false then
				self.lilHoping = 2
			else
				self.runHoping = 2
			end
			target.y = gridPos.y +1
			target.x = gridPos.x -1
			if self.facingRight then 
				if self.sprinting == false then
					self.lilHoping = 2
				else
					self.runHoping = 2
				end
				target.y = gridPos.y +1
				target.x = gridPos.x +1
			end
			move_fairy(self, target)
		end
	elseif action_id == hash("sprint") then
		if is_grounded(real_to_grid(go.get_position())) and action.value == 1 then
			self.sprinting = true
		elseif action.released then
			self.sprinting = false
		end
	elseif action_id == hash("shoot") then
		if action.value > 0.3 then
			self.shooting = true
		else
			self.shooting = false
		end
		if self.moving then
			rive.play_anim("#rivemodel", "run_shoot", go.PLAYBACK_LOOP_FORWARD)
			self.currentAnim = "run_shoot"
		else
			rive.play_anim("#rivemodel", "shoot", go.PLAYBACK_LOOP_FORWARD)
			self.currentAnim = "shoot"
		end
	end
end