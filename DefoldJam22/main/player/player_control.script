go.property("speedSprint", 8)
go.property("speedWalk", 4)

local function grid_to_real(vector3)
	local newvect = vmath.vector3(0,0,0)
	newvect.x = vector3.x * CELL_SIDE
	newvect.y = vector3.y * CELL_SIDE
	return newvect
end

local function real_to_grid(vector3)
	local newvect = vmath.vector3(0,0,0)
	newvect.x = math.floor(vector3.x / CELL_SIDE)
	newvect.y = math.floor(vector3.y / CELL_SIDE)
	return newvect
end

function init(self)
	sound.play("/music#main_theme")
	curentLevel = go.get_id("/terrain")
	CELL_SIDE = 50
	FAKE_FLOOR = 200 -- testing variable
	msg.post(".","acquire_input_focus")
	self.fairy = nil
	self.speed = self.speedWalk
	self.currentMovement = vmath.vector3(0,0,0)
	self.moving = false
	self.shooting = false
	self.facingRight = true
	self.gridCoords = vmath.vector3(8,4,0)
	go.set_position(grid_to_real(self.gridCoords))
	self.momentum = vmath.vector3() -- momentum represents forces, NOT the fairy
	self.controlMomentum = vmath.vector3()
	rive.play_anim("#rivemodel", "idle", go.PLAYBACK_ONCE_BACKWARD)
	self.currentAnim = "idle"
end

local function is_grounded(vector3) -- checks if position has tile under
	local bool = true
	local tile = tilemap.get_tile("/terrain#test_room", "collision", vector3.x, vector3.y)
	if tile == 0 then
		bool = false
	elseif tile == nil then
		bool = nil
	end
	return bool
end

local function is_walled(position, height) -- defaults on player
	if height == nil then height = 2 end
	if position == nil then position = real_to_grid(go.get_position()) end
	local blocked = {top=false,right=false,left=false}
	local tile = nil
	for i=1,height,1 do
		if tilemap.get_tile("/terrain#test_room", "collision", position.x+1, position.y+i) ~= 0 then
			blocked.right = true
			if debugMode then tilemap.set_tile("/terrain#test_room", "debug", position.x+1, position.y+i,3) end
		end
		if tilemap.get_tile("/terrain#test_room", "collision", position.x-1, position.y+i) ~= 0 then
			blocked.left = true
			if debugMode then tilemap.set_tile("/terrain#test_room", "debug", position.x-1, position.y+i,3) end
		end
	end
	
	if tilemap.get_tile("/terrain#test_room", "collision", position.x, position.y+1+height) ~= 0 then
		blocked.top = true
		if debugMode then tilemap.set_tile("/terrain#test_room", "debug", position.x, position.y+1+height,3) end
	end
	return blocked
end

local function move_finished(self)
	self.overrideProtection = false
	self.moving = false
	self.fairy = nil
	self.controlMomentum = vmath.vector3()
end

local function move_fairy(self,target)
	-- the "fairy" represents the action that the player is aiming to do
	-- it is visually represented in the game space and is used to
	-- connect movements to each other
	self.fairy = target
	local pos = real_to_grid(go.get_position())
	if is_walled(nil, nil).left and self.fairy.x < pos.x then self.fairy.x = pos.x end
	if is_walled(nil, nil).right and self.fairy.x > pos.x then self.fairy.x = pos.x end
	if is_walled(nil, nil).top and self.fairy.y > pos.y then self.fairy.y = pos.y end
	local i = 1
	local foundGround = false
	local pos = self.fairy + self.momentum + self.controlMomentum
	while foundGround == false do
		i = i - 1
		local newpos = vmath.vector3(pos.x,pos.y+i,0)
		local grounded = is_grounded(newpos)
		if grounded == nil then
			break
		elseif grounded then
			go.set_position(grid_to_real(newpos),go.get_id("/anticipator"))
			break
		end
		if i < -100 then break end
	end
end

function update(self, dt)
	playerPosition = go.get_position()
	local pPos = real_to_grid(playerPosition)
	local grounded = is_grounded(pPos)
	--if grounded and self.momentum.y < 0 then self.momentum.y = 0 end
	if is_walled().top and self.momentum.y > 0 then self.momentum.y = 0 end
	if self.moving == false then -- launch the moving procedure
		if grounded == false then
			self.momentum.y = - 1
		else
			self.momentum.y = 0
			if self.currentAnim ~= "run" and self.shooting == false then -- just animation
				rive.play_anim("#rivemodel", "run", go.PLAYBACK_LOOP_FORWARD)
				self.currentAnim = "run"
			end
			if self.facingRight then go.set(".","euler.y",180) else go.set(".","euler.y",0) end
		end
		---- movement calculation
		local move = vmath.vector3()
		if self.fairy == nil or grounded == false then -- just falling
			move = pPos + self.momentum
			rive.play_anim("#rivemodel", "idle", go.PLAYBACK_ONCE_FORWARD)
			self.currentAnim = "idle"
		elseif self.fairy ~= nil and grounded then -- player is moving and on floor
			move = self.fairy + self.momentum + self.controlMomentum
		end
		if move.y > pPos.y then -- again just animation
			rive.play_anim("#rivemodel", "jump", go.PLAYBACK_ONCE_BACKWARD)
			self.currentAnim = "jump"
		end
		if grounded == false or self.fairy ~= nil then -- if moving or falling
			--if tilemap.get_tile("/terrain#test_room", "collision", move.x, move.y+1) ~= 0 then 
			--	move.y = move.y + 1
			--end
			-- test collisions 
			if is_walled(nil, nil).left and move.x < pPos.x then move.x = pPos.x end
			if is_walled(nil, nil).right and move.x > pPos.x then move.x = pPos.x end
			if is_walled(nil, nil).top and move.y > pPos.y then move.y = pPos.y end
			if grounded and move.y < pPos.y then move.y = pPos.y end
			go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, grid_to_real(move), go.EASING_LINEAR, 1/self.speed,0,move_finished)
			self.moving = true
		end
	end
end

function on_message(self, message_id, message, sender)

end

function on_input(self, action_id, action)
	local pPos = go.get_position()
	if action_id == hash("y") and action.pressed then
		debugMode = true
	end
	if (action.pressed or self.overrideProtection == false) then
		if action_id == hash("left") then
			self.overrideProtection = false
			local gridPos = real_to_grid(go.get_position())
			local target = vmath.vector3(gridPos.x-1,gridPos.y,0)
			self.controlMomentum.y = - 1
			move_fairy(self, target)
			self.facingRight = false
		elseif action_id == hash("right") then
			self.overrideProtection = false
			local gridPos = real_to_grid(go.get_position())
			local target = vmath.vector3(gridPos.x+1,gridPos.y,0)
			self.controlMomentum.x = 1
			move_fairy(self, target)
			self.facingRight = true
		end
	end

	if action_id == hash("jump") and is_grounded(real_to_grid(go.get_position())) then
		self.overrideProtection = true
		local gridPos = real_to_grid(go.get_position())
		local target = vmath.vector3(gridPos.x - 1,gridPos.y+2,0)
		self.controlMomentum.y = 3
		self.controlMomentum.x = - 1
		if self.facingRight then 
			target.x = gridPos.x + 1
			self.controlMomentum.x = 1
		end
		move_fairy(self, target)
	elseif action_id == hash("sprint") then
		if is_grounded(real_to_grid(go.get_position())) and action.released == false then
			self.speed = self.speedSprint
		elseif action.released then
			self.speed = self.speedWalk
		end
	elseif action_id == hash("shoot") then
		if action.value > 0.3 then
			self.shooting = true
		else
			self.shooting = false
		end
		if self.moving then
			rive.play_anim("#rivemodel", "run_shoot", go.PLAYBACK_LOOP_FORWARD)
			self.currentAnim = "run_shoot"
		else
			rive.play_anim("#rivemodel", "shoot", go.PLAYBACK_LOOP_FORWARD)
			self.currentAnim = "shoot"
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
