go.property("speed", 4)
go.property("damage", 1)
go.property("score", 200)
function init(self)
	self.dir = vmath.vector3()
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	local pos = go.get_position()
	pos.x = pos.x + self.dir.x * self.speed
	pos.y = pos.y + self.dir.y * self.speed
	go.set_position(pos)
end

function fixed_update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") then
		particlefx.play("#explosion")
		sound.play("#explode")
		if message.other_group == hash("enemy") then
			msg.post("/score_manager", "gain_score",{amount=self.score,pos=go.get_position()})
			msg.post(message.other_id, "damage",{damage=self.damage})
		end
		go.delete()
	elseif message_id == hash("init") then
		self.dir = message.dir
		local angle = math.atan2(self.dir.y, self.dir.x)
		local rot = vmath.quat_rotation_z(angle)
		go.set_rotation(rot)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end