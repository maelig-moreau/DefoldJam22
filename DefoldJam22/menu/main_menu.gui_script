local function open_drawer(self,drawer)
	-- closes previous drawer
	for i in pairs(self.allBoxes[self.drawer]) do 
		local node = self.allBoxes[self.drawer][i]
		gui.set_enabled(node, false)
		gui.animate(node, "rotation.z", 360, gui.EASING_INOUTELASTIC, 0.2,0,anim_end)
		gui.animate(node, "scale", vmath.vector3(0,0,0), gui.EASING_INOUTELASTIC, 0.2)
	end
	-- open desired drawer
	if drawer == 0 then -- except if 0, then it just closes everything
		self.inMenu = false
		gui.set_enabled(self.highlightNode, false)
	else
		self.drawer = drawer
		for i in pairs(self.allBoxes[drawer]) do 
			local node = self.allBoxes[drawer][i]
			gui.set_enabled(node, true)
			gui.animate(node, "rotation.z", 0, gui.EASING_INOUTELASTIC, 0.2,0.05,anim_end)
			gui.animate(node, "scale", vmath.vector3(1,1,1), gui.EASING_INOUTELASTIC, 0.2)
		end
		self.highlighted = 1
		gui.set_enabled(self.highlightNode, true)
		gui.set_position(self.highlightNode, gui.get_position(self.allBoxes[self.drawer][self.highlighted]))
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("/loader", "acquire_input_focus")
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.2, 0.7, 0.7, 0) } )
	sound.play("#music")
	self.level = 1
	self.inMenu = true
	-- slot 1 = main menu, slot 2 = next level, 3 select level, 4 pause menu
	self.allBoxes = {{gui.get_node("start"),gui.get_node("levels")},
	{gui.get_node("next"),gui.get_node("main_menu")},
	{gui.get_node("level1"),gui.get_node("level2"),gui.get_node("level3"),gui.get_node("level4"),gui.get_node("level5")},
	{gui.get_node("continue"),gui.get_node("main_menu")}}
	self.drawer = 1 -- keeps track of which allBoxes slot is to be displayed
	self.highlighted = 1
	self.highlightNode = gui.get_node("highlight")
	for i in pairs(self.allBoxes) do
		for y in pairs(self.allBoxes[i]) do
			gui.set_enabled(self.allBoxes[i][y], false)
		end
	end
	open_drawer(self,1)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("proxy_loaded") then
		msg.post(sender, "init")
		msg.post(sender, "enable")
	elseif message_id == hash("next_level") then
		open_drawer(self, 2)
		msg.post("loader#level"..self.level, "unload")
		self.level = self.level + 1
		self.inMenu = true
	elseif message_id == hash("proxy_unloaded") then
		--msg.post("#level"..self.level, "load")
	end
end

function on_input(self, action_id, action)
	print(self.inMenu)
	if self.inMenu and action.pressed then
		if action_id == hash("start") or action_id == hash("jump" or action_id == hash("lclick") or action_id == hash("enter")) then
			if action_id == hash("lclick") then
				for i in pairs(self.allBoxes[self.drawer]) do 
					if gui.pick_node(self.allBoxes[self.drawer][i], action.x, action.y) then
						self.highlighted = i
						break
					end
				end
			end
			if self.highlighted == 1 and (self.drawer == 1 or self.drawer == 2) then
				msg.post("loader#level"..self.level, "load")
				open_drawer(self, 0) -- uses 0 as argument to close drawer
			elseif self.highlighted == 2 and self.drawer == 1 then
				open_drawer(self, 3)
			elseif self.highlighted == 2 and self.drawer == 2 then
				open_drawer(self, 1)
			elseif self.drawer == 3 then
				open_drawer(self, 0)
				msg.post("loader#level"..self.highlighted, "load")
				self.level = self.highlighted
			elseif self.drawer == 4 and self.highlighted == 2 then
				msg.post("loader#level"..self.level, "unload")
				open_drawer(self, 1)
			elseif self.drawer == 4 and self.highlighted == 1 then
				open_drawer(self, 0)
				msg.post("loader#level"..self.level, "enable")
			end
		elseif action_id == hash("up") and self.highlighted > 1 then
			self.highlighted = self.highlighted - 1
			gui.set_position(self.highlightNode, gui.get_position(self.allBoxes[self.drawer][self.highlighted]))
		elseif action_id == hash("down") and self.highlighted < #self.allBoxes[self.drawer] then
			self.highlighted = self.highlighted + 1
			gui.set_position(self.highlightNode, gui.get_position(self.allBoxes[self.drawer][self.highlighted]))
		elseif action_id == hash("left") and self.highlighted > 3 and self.drawer == 3 then
			self.highlighted = self.highlighted - 3
			gui.set_position(self.highlightNode, gui.get_position(self.allBoxes[self.drawer][self.highlighted]))
		elseif action_id == hash("right") and self.highlighted < #self.allBoxes[self.drawer] + 3 and self.drawer == 3 then
			self.highlighted = self.highlighted + 3
			gui.set_position(self.highlightNode, gui.get_position(self.allBoxes[self.drawer][self.highlighted]))
		elseif action_id == hash("esc") and self.drawer == 4 then
			open_drawer(self, 0)
			msg.post("loader#level"..self.level, "enable")
		end
	elseif (action_id == hash("start") or action_id == hash("esc")) and action.pressed then
		self.inMenu = true
		open_drawer(self, 4)
		msg.post("loader#level"..self.level, "disable")
	end
end